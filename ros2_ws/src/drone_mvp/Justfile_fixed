# ========================================
# KAERTEI 2025 FAIO - Optimized Justfile
# Universal Commands (Ubuntu/Docker)
# ========================================

# Show available commands
default:
    @echo "🚁 KAERTEI 2025 FAIO - Competition Ready System"
    @echo "=============================================="
    @echo ""
    @echo "🎯 Quick Setup:"
    @echo "  just install     # Auto-detect & install everything"
    @echo "  just test        # Validate system"
    @echo "  just mission     # Start competition mission"
    @echo ""
    @just --list

# ===================
# 🚀 INSTALLATION
# ===================

# Universal auto-detect installer
install:
    @echo "🚀 Starting KAERTEI 2025 auto-installer..."
    @chmod +x install_kaertei.sh
    @./install_kaertei.sh

# Legacy Ubuntu 22.04 setup (deprecated)
setup-ubuntu:
    @echo "⚠️  Using legacy installer..."
    @echo "💡 Recommended: just install (auto-detect)"
    @./setup_ubuntu22_legacy.sh

# ===================
# 🏆 MISSION COMMANDS
# ===================

# Competition mission (auto-detect Docker/Ubuntu)
mission:
    #!/usr/bin/env bash
    if command -v docker >/dev/null && docker ps >/dev/null 2>&1; then
        echo "🐳 Docker detected - running in container"
        just docker-mission
    else
        echo "🖥️  Ubuntu detected - running natively"
        just ubuntu-mission
    fi

# Ubuntu native mission
ubuntu-mission:
    @echo "🚁 Starting mission on Ubuntu (native)..."
    @if [ ! -d "../../../install" ]; then echo "🔨 Building workspace first..."; just build; fi
    @./run_checkpoint_mission.sh debug

# Docker containerized mission
docker-mission:
    @echo "🐳 Starting mission in Docker container..."
    @docker exec -it kaertei2025_hexacopter bash -c "source /opt/ros/humble/setup.bash && ./run_checkpoint_mission.sh debug"

# Debug mission (step-by-step with checkpoints)
mission-debug:
    @echo "🔍 Debug mission (26 checkpoints step-by-step)..."
    @./run_checkpoint_mission.sh debug

# Autonomous mission (full competition mode)
mission-auto:
    @echo "🤖 Autonomous competition mission..."
    @./run_checkpoint_mission.sh auto

# ===================
# 🧪 TESTING & STATUS
# ===================

# Quick system test (auto-detect environment)
test:
    #!/usr/bin/env bash
    if command -v docker >/dev/null && docker ps >/dev/null 2>&1; then
        echo "🐳 Testing Docker environment..."
        just docker-test
    else
        echo "🖥️  Testing Ubuntu environment..."
        just ubuntu-test
    fi

# Complete Ubuntu system validation
ubuntu-test:
    @echo "🧪 Ubuntu system validation..."
    @python3 validate_ubuntu22.py

# Docker container test
docker-test:
    @echo "🐳 Docker container validation..."
    @docker exec -it kaertei2025_hexacopter python3 validate_ubuntu22.py

# System status (universal)
status:
    @echo "📊 KAERTEI 2025 System Status"
    @echo "============================="
    @echo "🖥️  OS: $(lsb_release -d 2>/dev/null | cut -f2 || echo 'Unknown')"
    @echo "🏗️  Arch: $(uname -m)"
    @echo "🐍 Python: $(python3 --version 2>/dev/null || echo 'Not found')"
    @echo "🤖 ROS 2: $(test -f /opt/ros/humble/setup.bash && echo 'Humble ✅' || echo 'Not installed ❌')"
    @echo "🐳 Docker: $(command -v docker >/dev/null && echo 'Available ✅' || echo 'Not installed ❌')"
    @echo "🔧 Hardware: $(ls /dev/tty{ACM,USB}* 2>/dev/null | wc -l) device(s)"
    @echo "📷 Cameras: $(ls /dev/video* 2>/dev/null | wc -l) camera(s)"
    @echo "🍓 Raspberry Pi: $([ -f /proc/cpuinfo ] && grep -q "Raspberry Pi" /proc/cpuinfo && echo 'Yes ✅' || echo 'No')"

# Hardware detection
hardware:
    @echo "🔍 Hardware Detection"
    @echo "===================="
    @echo "📡 Flight Controllers:"
    @ls /dev/tty{ACM,USB}* 2>/dev/null || echo "❌ No flight controllers detected"
    @echo ""
    @echo "📷 Cameras:"
    @v4l2-ctl --list-devices 2>/dev/null || echo "❌ No cameras detected" 
    @echo ""
    @echo "🎮 GPIO (Raspberry Pi):"
    @python3 -c "import RPi.GPIO; print('✅ GPIO ready')" 2>/dev/null || echo "⚠️  Not on Raspberry Pi or GPIO unavailable"

# ===================
# 🐳 DOCKER COMMANDS
# ===================

# Build Docker image
docker-build:
    @echo "🐳 Building KAERTEI Docker image..."
    @docker-compose build --no-cache

# Start Docker container
docker-start:
    @echo "🐳 Starting KAERTEI container..."
    @docker-compose up -d
    @echo "✅ Container ready. Access: docker exec -it kaertei2025_hexacopter bash"

# Stop Docker container
docker-stop:
    @echo "🐳 Stopping KAERTEI container..."
    @docker-compose down

# Enter Docker container
docker-shell:
    @echo "🐳 Entering container shell..."
    @docker exec -it kaertei2025_hexacopter bash

# Clean Docker resources
docker-clean:
    @echo "🐳 Cleaning Docker resources..."
    @docker-compose down --volumes
    @docker system prune -f
    @echo "✅ Docker resources cleaned"

# ===================
# 🛠️ DEVELOPMENT
# ===================

# Build ROS 2 workspace
build:
    @echo "🔨 Building ROS 2 workspace..."
    @cd ../../.. && colcon build --packages-select drone_mvp

# Clean build files
clean:
    @echo "🧹 Cleaning build files..."
    @cd ../../.. && rm -rf build/ install/ log/
    @echo "✅ Build files cleaned"

# Update system and dependencies
update:
    @echo "🔄 Updating system..."
    @sudo apt update && sudo apt upgrade -y
    @pip3 install --upgrade -r requirements.txt

# ===================
# 🆘 EMERGENCY
# ===================

# Emergency stop all processes
stop:
    @echo "🚨 Emergency stop - killing all processes..."
    @pkill -f "python3.*mission" || true
    @pkill -f "ros2" || true
    @pkill -f "mavros" || true
    @echo "✅ All processes stopped"

# Competition day emergency reset
emergency:
    @echo "🆘 Competition Emergency Reset"
    @echo "============================="
    @pkill -f ros2 || true
    @pkill -f mavros || true
    @pkill -f python3 || true
    @sudo rmmod usbserial || true
    @sudo modprobe usbserial || true
    @sudo chmod 666 /dev/tty{USB,ACM}* 2>/dev/null || true
    @ros2 daemon stop || true
    @ros2 daemon start || true
    @echo "✅ Emergency reset completed"
    @echo "🚀 Run: just mission"

# ===================
# 📚 HELP & INFO
# ===================

# Competition quick help
help:
    @echo "🏆 KAERTEI 2025 - Competition Quick Guide"
    @echo "======================================="
    @echo ""
    @echo "🚀 Setup (first time):"
    @echo "  just install"
    @echo ""
    @echo "🎯 Competition Day:"
    @echo "  just test        # Validate system"
    @echo "  just hardware    # Check hardware"
    @echo "  just mission     # Start competition"
    @echo "  just stop        # Emergency stop"
    @echo ""
    @echo "🐳 Docker Mode:"
    @echo "  just docker-build    # Build container"
    @echo "  just docker-start    # Start container"  
    @echo "  just docker-mission  # Run in container"
    @echo ""
    @echo "Full commands: just --list"

# System information
info:
    @echo "ℹ️  KAERTEI 2025 FAIO System"
    @echo "=========================="
    @echo "Project: Autonomous Hexacopter"
    @echo "Platform: Ubuntu 22.04 + ROS 2 Humble"
    @echo "Mission: 26-Checkpoint Competition"
    @echo "Hardware: Pixhawk + Multi-Camera + GPIO"
    @echo "Modes: Ubuntu Native / Docker Container"
    @echo "Repository: github.com/Vanszs/Dirgagah-KAERTEI"
